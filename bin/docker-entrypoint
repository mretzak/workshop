#!/bin/bash -e

# Workshop-specific database setup with automatic migration and seeding
if [ "${1}" == "./bin/rails" ] && [ "${2}" == "server" ]; then
  echo "🚀 Starting N+1 Workshop application..."
  echo "📊 Setting up database (Host: ${DATABASE_HOST:-localhost}, User: ${DATABASE_USERNAME:-workshop}, DB: workshop_development)..."

  echo "DEBUG: DATABASE_HOST environment variable is: [${DATABASE_HOST}]" # Added for debugging

  echo "⏳ Waiting for Rails to connect to database..."
  retry_count=0
  max_retries=30 # Wait for up to 60 seconds (30 * 2s)
  # Removed > /dev/null 2>&1 from the next line to see errors on each attempt
  until RAILS_ENV=development ./bin/rails runner "ActiveRecord::Base.connection.execute('SELECT 1')"; do
    retry_count=$((retry_count + 1))
    if [ "$retry_count" -gt "$max_retries" ]; then
      echo "❌ Failed to connect to database via Rails after $max_retries attempts. See error from last attempt above."
      # The script will likely exit here due to set -e and the failing command in the until condition
      exit 1
    fi
    # Updated message to guide where to look for the error
    echo "Database not ready for Rails (attempt $retry_count/$max_retries), waiting 2s... Error from rails runner should be visible above this line."
    sleep 2
  done
  echo "✅ Rails connected to database!"

  echo "🔎 Checking if database schema (tables) exists..."
  # Capture the output from the Rails runner script
  # This script will print specific strings based on the state
  setup_needed_output=$(RAILS_ENV=development ./bin/rails runner "
    begin
      User.count # Attempt to count users
      puts 'SETUP_NOT_NEEDED'
    rescue ActiveRecord::StatementInvalid, PG::UndefinedTable # Common errors if tables don't exist
      puts 'NEEDS_SETUP_TABLES_MISSING'
    rescue PG::ConnectionBad => e # Specific connection errors
      puts \"NEEDS_SETUP_CONNECTION_BAD: #{e.message.split('\\n').first}\"
    rescue => e # Other errors
      puts \"NEEDS_SETUP_OTHER_ERROR: #{e.class} - #{e.message.split('\\n').first}\"
    end
  ")

  echo "🔬 DB Check Output: ${setup_needed_output}"

  if [[ "${setup_needed_output}" == "SETUP_NOT_NEEDED" ]]; then
    echo "📋 Database schema already exists. Checking for pending migrations..."
    RAILS_ENV=development ./bin/rails db:migrate
    if [ $? -ne 0 ]; then
      echo "❌ Database migration failed during routine check!"
      exit 1
    fi
    echo "✅ Database migrations checked. Ready for workshop!"
  elif [[ "${setup_needed_output}" == NEEDS_SETUP* ]]; then # Catches all NEEDS_SETUP variants
    echo "🔧 Database needs setup. Reason: ${setup_needed_output}"

    echo "⚙️ Running database migrations..."
    RAILS_ENV=development ./bin/rails db:migrate
    if [ $? -ne 0 ]; then
      echo "❌ Database migration failed!"
      exit 1
    fi

    echo "🌱 Seeding workshop data..."
    RAILS_ENV=development ./bin/rails db:seed
    if [ $? -ne 0 ]; then
      echo "❌ Database seeding failed!"
      exit 1
    fi
    echo "✨ Workshop database setup complete!"
  else
    echo "🤷 Unknown database state from check: '${setup_needed_output}'. Exiting."
    exit 1
  fi

  echo ""
  echo "🎯 Workshop endpoints ready:"
  echo "   📝 Rails API (N+1 example): http://localhost:3000/posts/n_plus_one"
  echo "   🚀 Rails API (Optimized):   http://localhost:3000/posts/optimized"
  echo "   🔍 GraphQL Endpoint:        http://localhost:3000/graphql"
  echo "   🎨 GraphiQL UI:             http://localhost:3000/graphiql"
  echo ""
fi

exec "${@}"
